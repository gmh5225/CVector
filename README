
CVECTOR

(c) Robert Winkler 2011-2012
=======

This is a relatively simple ANSI compliant C vector library with specific structures and
functions for int's, double's and string's and support for all other types
using a generic structure where the type is passed in as void* and stored in a byte array
(to avoid dereferencing void* warnings and frequent casting) .
The generic vector is very flexible and allows you to provide free and init functions 
if you like that it will call at appropriate times similar to the way C++ containers
will call destructors.

Other modifiable parameters are at the top of vector.c
<pre>
size_t VEC_I_START_SZ = 50;
size_t VEC_D_START_SZ = 50;
size_t VEC_START_SZ = 20;
size_t VEC_S_START_SZ = 20;

#define VECI_ALLOCATOR(x) (x*2)
#define VECD_ALLOCATOR(x) (x*2)
#define VECS_ALLOCATOR(x) (x*2)
#define VEC_ALLOCATOR(x) (x*2)
</pre>
The allocator macros are used in all functions that increase the size by 1.
In others (constructors, insert_array, reserve) VEC_X_START_SZ is the amount
extra allocated.


With version 2.0 I've added vector_template.c and vector_template.h which are
used to generate code for any type (that doesn't require individual allocation/freeing
like vector_s).  It behaves exactly like vector_i (or d).  This is preferable to using
the generic vector for simple types and basic structures etc. since it's faster and clearer.

To use generate your own c and h file for a type just run:
<pre>
python3 generate_code.py yourtype
</pre>

which will generate vector_yourtype.c and vector_yourtype.h

vector_short is an example of the process and how to add it to the testing


Building
========
I use premake so the command on linux is premake4 gmake which
will generate a build directory.  cd into that and run make
or make config=release.  I have not tried it on windows though
it should work (well I'm not sure about CUnit ...).

There is no output of any kind, no errors or warnings.


It has been relatively well tested using Cunit tests which all pass.
I've also run it under valgrind and there are no memory leaks.

valgrind --leak-check=yes ./vector
 
==3335== HEAP SUMMARY:
==3335==     in use at exit: 0 bytes in 0 blocks
==3335==   total heap usage: 4,983 allocs, 4,983 frees, 798,643 bytes allocated
==3335== 
==3335== All heap blocks were freed -- no leaks are possible
==3335== 
==3335== For counts of detected and suppressed errors, rerun with: -v
==3335== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)




I plan to continue to improve/modify it but probably only in minor ways and
only if I think something should be changed.  This library is mostly
for my own use but I thought I would share it and use it as a platform
to learn TDD, CUnit and Doxygen.


You can probably get Cunit from your package manager but
if you want to get the most up to date version of CUnit go here:

http://cunit.sourceforge.net/index.html
http://sourceforge.net/projects/cunit/

I used version 2.1-2.



To actually use the library just copy vector.c and vector.h to your project.
To get a good idea of how to use the library and see it in action and how it should
behave, look at vector_tests.c


CVector is licensed under the MIT License.  See LICENSE